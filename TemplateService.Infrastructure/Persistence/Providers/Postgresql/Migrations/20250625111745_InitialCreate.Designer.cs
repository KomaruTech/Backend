// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TemplateService.Infrastructure.Persistence.Providers.Postgresql;

#nullable disable

namespace TemplateService.Infrastructure.Persistence.Providers.Postgresql.Migrations
{
    [DbContext(typeof(TemplatePostgresqlDbContext))]
    [Migration("20250625111745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("XXATACH_TMP")
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TemplateService.Domain.Entities.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("TMP_Documents", "XXATACH_TMP", t =>
                        {
                            t.HasComment("Документы");
                        });
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.MetaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasColumnType("text");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid");

                    b.Property<int>("MetaTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("MetaTypeId");

                    b.ToTable("TMP_Metas", "XXATACH_TMP", t =>
                        {
                            t.HasComment("Мета-описание документа");
                        });
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.MetaTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TMP_MetaTypes", "XXATACH_TMP", t =>
                        {
                            t.HasComment("Тип мета-данных");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ID документа в СЭД АТАЧ",
                            Name = "atachdocumentid"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Регистрационный номер",
                            Name = "regnumber"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Дата регистрации",
                            Name = "regdate"
                        });
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.NotificationPreferencesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("NotifyEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotifyTelegram")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReminderBefore1Day")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReminderBefore1Hour")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferencesEntity", "XXATACH_TMP");
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("NotificationPreferencesId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_preferences_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telegram_id");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("NotificationPreferencesId");

                    b.ToTable("users", "XXATACH_TMP");
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.MetaEntity", b =>
                {
                    b.HasOne("TemplateService.Domain.Entities.DocumentEntity", "Document")
                        .WithMany("Metas")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TemplateService.Domain.Entities.MetaTypeEntity", "MetaType")
                        .WithMany("Metas")
                        .HasForeignKey("MetaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("MetaType");
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("TemplateService.Domain.Entities.NotificationPreferencesEntity", "NotificationPreferences")
                        .WithMany()
                        .HasForeignKey("NotificationPreferencesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("NotificationPreferences");
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.DocumentEntity", b =>
                {
                    b.Navigation("Metas");
                });

            modelBuilder.Entity("TemplateService.Domain.Entities.MetaTypeEntity", b =>
                {
                    b.Navigation("Metas");
                });
#pragma warning restore 612, 618
        }
    }
}
