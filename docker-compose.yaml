version: "3.9"

services:
  postgres:
    image: postgres:17
    container_name: template_postgres
    mem_limit: 500m
    mem_reservation: 300m
    environment:
      POSTGRES_DB: server
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: template_api
    mem_limit: 1g
    mem_reservation: 600m
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "5124:5124"
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=server;Username=postgres;Password=postgres;Timeout=300"
      ASPNETCORE_ENVIRONMENT: Development

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: template_worker
    mem_limit: 300m
    mem_reservation: 200m
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=server;Username=postgres;Password=postgres;Timeout=300"
      ASPNETCORE_ENVIRONMENT: Development

  telegram:
    build:
      context: .
      dockerfile: Dockerfile.telegram
    container_name: template_telegram
    mem_limit: 500m
    mem_reservation: 300m
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      worker:
        condition: service_started
    ports:
      - "5125:5125"
    environment:
      ConnectionStrings__DefaultConnection: "Host=postgres;Port=5432;Database=server;Username=postgres;Password=postgres;Timeout=300"
      ASPNETCORE_ENVIRONMENT: Development

volumes:
  postgres_data: